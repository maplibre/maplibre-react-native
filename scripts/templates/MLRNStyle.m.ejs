<%
  const layers = locals.layers;
  const helpers = locals.helpers;
-%>
// <%= helpers.autoGeneratedHeader.doNotModify %>
// <%= helpers.autoGeneratedHeader.generatedFrom(locals.filePath) %>

#import "MLRNStyle.h"
#import "MLRNUtils.h"

@implementation MLRNStyle

- (id)initWithMLNStyle:(MLNStyle*)mlnStyle
{
    if (self = [super init]) {
        _style = mlnStyle;
    }
    return self;
}

<% for (const layer of layers) { %>
- (void)<%- helpers.setLayerMethodName(layer, 'ios') -%>:(<%- helpers.getLayerType(layer, 'ios') -%> *)layer withReactStyle:(NSDictionary *)reactStyle isValid:(BOOL (^)(void)) isValid
{
  if (![self _hasReactStyle:reactStyle]) {
    // TODO throw exception
    return;
  }

  NSArray<NSString*> *styleProps = [reactStyle allKeys];
  for (NSString *prop in styleProps) {
    MLRNStyleValue *styleValue = [MLRNStyleValue make:reactStyle[prop]];

  <% for (let i = 0; i < layer.properties.length; i++) { -%>
  <%- helpers.ifOrElseIf(i) -%> ([prop isEqualToString:@"<%= layer.properties[i].name %>"]) {
  <%_ if (layer.properties[i].image) { _%>
      if (![styleValue shouldAddImage]) {
        [self set<%- helpers.iosPropMethodName(layer, helpers.pascalCase(layer.properties[i].name)) -%>:layer withReactStyleValue:styleValue];
      } else {
        NSString *imageURI = [styleValue getImageURI];

        [MLRNUtils fetchImage:_bridge url:imageURI scale:[styleValue getImageScale] sdf:[styleValue getImageSdf] callback:^(NSError *error, UIImage *image) {
          if (image != nil) {
            dispatch_async(dispatch_get_main_queue(), ^{
              if (isValid()) {
                [self->_style setImage:image forName:imageURI];
                [self set<%- helpers.iosPropMethodName(layer, helpers.pascalCase(layer.properties[i].name)) -%>:layer withReactStyleValue:styleValue];
              }
            });
          }
        }];
      }
  <%_ } else { _%>
      [self set<%- helpers.iosPropMethodName(layer, helpers.pascalCase(layer.properties[i].name)) -%>:layer withReactStyleValue:styleValue];
  <%_ } _%>
  <%_ if (layer.properties[i].transition) { _%>
    } else if ([prop isEqualToString:@"<%= layer.properties[i].name %>Transition"]) {
      [self set<%- helpers.iosPropMethodName(layer, helpers.pascalCase(layer.properties[i].name)) -%>Transition:layer withReactStyleValue:styleValue];
  <%_ } _%>
  <% } -%>
  } else {
      // TODO throw exception
    }
  }
}
<% } %>

<% for (const layer of layers) {%>
<% for (const prop of layer.properties) {%>
- (void)set<%- helpers.iosPropMethodName(layer, helpers.pascalCase(prop.name)) -%>:(<%- helpers.getLayerType(layer, 'ios') -%> *)layer withReactStyleValue:(MLRNStyleValue *)styleValue
{
    <%_ if (layer.name === 'light' && prop.name === 'position') { _%>
    layer.position = [styleValue getSphericalPosition];
    <%_ } else if (prop.name === 'visibility') { _%>
    layer.visible = [styleValue isVisible];
    <%_ } else { _%>
    layer.<%- helpers.iosPropName(prop.name) -%> = styleValue.mlnStyleValue;
    <%_ } _%>
}
<%_ if (prop.transition) { _%>

- (void)set<%- helpers.iosPropMethodName(layer, helpers.pascalCase(prop.name)) -%>Transition:(<%- helpers.getLayerType(layer, 'ios') -%> *)layer withReactStyleValue:(MLRNStyleValue *)styleValue
{
    layer.<%- helpers.iosPropName(prop.name) -%>Transition = [styleValue getTransition];
}
<%_ } _%>
<% } %>
<% } %>

- (BOOL)_hasReactStyle:(NSDictionary *)reactStyle
{
  return reactStyle != nil && reactStyle.allKeys.count > 0;
}

@end
